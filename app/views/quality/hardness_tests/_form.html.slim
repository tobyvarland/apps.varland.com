= simple_form_for(@hardness_test, html: {class: ["vp-gray-form", "my-3"]}) do |f|

  = f.association :user, as: :hidden

  = f.error_notification
  = f.error_notification message: f.object.errors[:base].to_sentence if f.object.errors[:base].present?

  .row
    .col-12.col-md.mt-3 = f.input :tested_on, required: true, label: "Date:", autofocus: true , as: :date, html5: true, input_html: { style: "margin: 0 !important;" }
    .col-12.col-md.mt-3 = f.input :test_type, required: true, collection: Quality::HardnessTest.type_options, label: "Type:", input_html: { class: "form-select" }
    .col-12.col-md.mt-3 = f.input :shop_order_number, required: true, label: "Shop Order:"
    .col-12.col-md.mt-3 = f.input :load, required: true, label: "Load:", disabled: true, wrapper_html: { class: "d-none" }
    .col-12.col-md.mt-3 = f.input :is_rework, label: "Rework:", disabled: true, collection: [["Yes", true], ["No", false]], input_html: { class: "form-select" }, include_blank: false, wrapper_html: { class: "d-none" }
  .row
    .col-12.col-md.mt-3 = f.input :piece_1, required: true, label: "Piece #1:"
    .col-12.col-md.mt-3 = f.input :piece_2, required: true, label: "Piece #2:"
    .col-12.col-md.mt-3 = f.input :piece_3, required: true, label: "Piece #3:"
    .col-12.col-md.mt-3 = f.input :piece_4, required: true, label: "Piece #4:"
    .col-12.col-md.mt-3 = f.input :piece_5, required: true, label: "Piece #5:"

  .form-actions.form-actions-between
    div
      .d-none.flew-row.align-items-center.justify-content-start id="shop-order-info"
        small.text-uncolor Customer:
        .fw-700.ms-1 id="shop-order-customer"
        small.text-uncolor.ms-3 Process Code:
        .fw-700.ms-1 id="shop-order-process"
        small.text-uncolor.ms-3 Part ID:
        .fw-700.ms-1 id="shop-order-part"
        .d-flex.flex-row.align-items-center.justify-content-start id="shop-order-sub-wrapper"
          small.text-uncolor.ms-3 Sub ID:
          .fw-700.ms-1 id="shop-order-sub"
    div
      = link_to "#{fa "times"} Cancel".html_safe, quality_hardness_tests_url, class: ["btn", "btn-light", "btn-sm", "me-3"], tabindex: -1
      = f.button :button, "#{fa "check"} Save Hardness Test".html_safe, class: ["btn-primary", "btn-sm"]

javascript:

  // Javascript functions to run on page load.
   $(function() {

      // Reference form objects.
      var $testTypeInput = $("#quality_hardness_test_test_type");
      var $loadInput = $("#quality_hardness_test_load");
      var $reworkInput = $("#quality_hardness_test_is_rework");
      var $loadWrapper = $loadInput.parent();
      var $reworkWrapper = $reworkInput.parent();
      var $shopOrderInfoContainer = $("#shop-order-info");
      var $shopOrderCustomer = $("#shop-order-customer");
      var $shopOrderProcess = $("#shop-order-process");
      var $shopOrderPart = $("#shop-order-part");
      var $shopOrderSub = $("#shop-order-sub");
      var $shopOrderSubWrapper = $("#shop-order-sub-wrapper");
      var $shopOrderInput = $("#quality_hardness_test_shop_order_number");

      // Handle shop order change.
      $shopOrderInput.on("change", function() {

        // Read shop order number.
        var shopOrder = $shopOrderInput.val();

        // Handle valid shop order number entry.
        if (shopOrder.match(/^\d{6}$/) !== null) {

          // Load shop order details from System i.
          var url = "http://vcmsapi.varland.com/shop_order?shop_order=" + shopOrder;
          $.ajax(url).done(function(data) {
            if (data.valid) {
              $shopOrderInfoContainer.removeClass("d-none").addClass("d-flex");
              $shopOrderCustomer.text(data.customer);
              $shopOrderProcess.text(data.process);
              $shopOrderPart.text(data.part);
              if (data.sub != "") {
                $shopOrderSubWrapper.removeClass("d-none").addClass("d-flex");
                $shopOrderSub.text(data.sub);
              } else {
                $shopOrderSubWrapper.removeClass("d-flex").addClass("d-none");
              }
            } else {
              $shopOrderInfoContainer.removeClass("d-flex").addClass("d-none");
            }
          });
        } else {
          $shopOrderInfoContainer.removeClass("d-flex").addClass("d-none");
        }

      });

      // Handle test type change.
      $testTypeInput.on("change", function() {

        // Get value of test type input.
        var type = $testTypeInput.val();

        // If no type or "Raw" selected, hide & disable fields. Otherwise show & enable.
        if (type == "Raw" || type == "") {
            $loadInput.prop('disabled', true);
            $reworkInput.prop('disabled', true);
            $loadWrapper.addClass("d-none");
            $reworkWrapper.addClass("d-none");
         } else {
            $loadInput.prop('disabled', false);
            $reworkInput.prop('disabled', false);
            $loadWrapper.removeClass("d-none");
            $reworkWrapper.removeClass("d-none");
         }

      });

   });