= simple_form_for(result, html: {class: ["vp-gray-form"]}) do |f|

  = f.error_notification
  = f.error_notification message: f.object.errors[:base].to_sentence if f.object.errors[:base].present?

  = f.association :record_type, as: :hidden
  = f.association :user, as: :hidden
  = f.association :device, as: :hidden
  = f.input :type, as: :hidden, input_html: { value: type }

  .row
    .col-12.col-md-6.mt-3
      = f.association :reason_code, label: "Reason:", required: true, input_html: { class: "form-select" }
    .col-12.col-md-6.mt-3
      = f.input :result_on, label: "Date:", required: true, as: :date, html5: true, input_html: { style: "margin: 0 !important;" }

  - if result.record_type.has_youtube_video?
    .ratio.ratio-16x9.mt-3
      iframe src="#{result.record_type.youtube_embed_url}" allowfullscreen="allowfullscreen"

  - unless result.record_type.instructions.blank?
    .mt-3.border.rounded.shadow-sm.p-3.small == @markdown.render(result.record_type.instructions)

  - if lookup_context.exists?("#{type.demodulize.underscore}_fields", ["records/results"], true)
    = render partial: "records/results/#{type.demodulize.underscore}_fields", locals: { f: f, result: result }

  .row
    .col-12.mt-3
      = f.input :comments, label: "#{fa "markdown", type: "fab"} Comments:".html_safe, required: false

  .form-actions
    div
      = f.button :button, "#{fa "check"} Save Record".html_safe, class: ["btn-primary", "btn-sm"]