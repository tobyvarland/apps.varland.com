ruby:
  provide(:title, "Record Type Details: #{@record_type.name}")

- content_for :nav do
  = render "records/nav"

.d-flex.flex-row.align-items-center.justify-content-between.mt-3
  h1.font-varland = "Record Type Details: #{@record_type.name}"
  div
    = link_to "#{fa "list-alt"} All Record Types".html_safe, records_record_types_url, class: ["btn", "btn-sm", "btn-primary"]
    - if policy(:records).admin?
      = link_to "#{fa "edit"} Edit".html_safe, edit_records_record_type_path(@record_type), class: ["btn", "btn-sm", "btn-primary", "ms-1"]
      = link_to "#{fa "trash-alt"} Delete".html_safe, @record_type, method: :delete, data: { confirm: 'Are you sure?' }, class: ["btn", "btn-sm", "btn-danger", "ms-1"]

.row

  .col-12.col-md-3

    ruby:
      details = []
      details << {label: "Data Type", value: dropdown_human_readable(Records::RecordType.available_data_types, @record_type.data_type)}
      details << {label: "Responsibility", value: dropdown_human_readable(Records::RecordType.available_responsibilities, @record_type.responsibility)}
      details << {label: "Frequency", value: "every #{pluralize @record_type.frequency, "day"}"} unless @record_type.frequency.blank?
      details << {label: "Instructions", value: link_to(@record_type.url.truncate(30), @record_type.url, target: "_blank")} unless @record_type.url.blank?
      details << {label: "# Devices Assigned", value: @record_type.assignments.for_active_device.length}
    = card_list "Record Type Details", details

  .col-12.col-md-9

    - if @record_type.assignments.for_active_device.length > 0

      - if policy(:records).data_entry?
        .card.bg-light.mt-3
          h6.card-header.d-flex.flex-row.align-items-center.justify-content-between
            div = "Enter New #{@record_type.record_subclass.demodulize.titleize}"
            - unless @record_type.url.blank?
              = link_to "#{fa "link"} Instructions".html_safe, @record_type.url, target: "_blank", class: ["btn", "btn-sm", "btn-dark"]
          .card-body.p-0
            = render partial: "records/results/record_type_form", locals: { result: @record_type.results.build(user: current_user, result_on: Date.current), type: @record_type.record_subclass }

      .card.bg-light.mt-3
        h6.card-header Current Status of Devices
        table.table.mb-0.small.table-hover.table-striped.table-borderless
          thead
            tr
              th.px-3 Device Name
              th.px-3.text-center Last Record
              th.px-3.text-center Next Record Due
              th.px-3.text-center Days Until Due
          tbody
            - @record_type.assignments.for_active_device.by_due_date.each do |obj|
              tr *{class: "#{"past-due" if obj.next_result_due_in_days && obj.next_result_due_in_days < 0}"}
                td.px-3 = link_to obj.device.name, obj.device
                td.px-3.text-center
                  - if obj.last_result_on.blank?
                    span.fst-italic Never
                  - else
                    = obj.last_result_on.strftime "%m/%d/%y"
                - if obj.next_result_due_on.blank?
                  td.text-center.fst-italic.text-uncolor &ndash;
                  td &nbsp;
                - else
                  td.text-center = obj.next_result_due_on.strftime "%m/%d/%y"
                  td.text-center = record_days_badge obj.next_result_due_in_days

    .card.bg-light.mt-3
      h6.card-header Full History
      = render partial: "records/results/table_for_record_type", locals: { results: @record_type.results.reverse_chronological, type: @record_type.record_subclass }