ruby:
  nav_links = []
  nav_links << { text: "Timeclock", url: "http://timeclock.varland.com", target: "_blank", search: "break" }
  nav_links << { text: "Timeclock (iPad View)", url: "http://timeclock.varland.com/ipad/", target: "_blank", search: "break" }
  nav_links << { text: "QMS", url: "http://vmsqms.varland.com", target: "_blank", search: "VMSQMS" }
  nav_links << { text: "Permissions", url: permissions_url } if policy(Permission).index?
  if policy(:home).sidekiq?
    nav_links << { text: "Reset Sidekiq", url: reset_sidekiq_url, target: "_blank" }
    nav_links << { text: "Sidekiq", url: sidekiq_web_url, target: "_blank" }
  end
  nav_links << { text: "Varland Email", url: "http://mail.varland.com", target: "_blank", search: "external webmail gmail", external: true }
  nav_links << { text: "Employee Information", url: "https://drive.google.com/drive/u/0/folders/0ADakPLFe9iZlUk9PVA", target: "_blank", search: "external departmental information", external: true }
  nav_links << { text: "Vector Solutions Training", url: "https://varland.convergencetraining.com", target: "_blank", search: "external quizzes", external: true }
  nav_links << { text: "Specifications", url: "http://vms.varland.com/specifications", target: "_blank" }
  nav_links << { text: "Vat History Notes", url: "http://vms.varland.com/materials/vat_history_notes", target: "_blank" }
  nav_links << { text: "Maintenance History Report", url: "http://192.168.82.2/maintenance/history", target: "_blank" }
  nav_links << { text: "PM Scheduled Tasks", url: "http://vms.varland.com/maintenance/scheduled_task_status", target: "_blank", search: "maintenance" }
  nav_links << { text: "Maintenance Work Orders", url: "http://maintenance.varland.com", target: "_blank" }
  nav_links << { text: "Days Turn", url: "http://daysturn.varland.com", target: "_blank", search: "turnaround" }
  nav_links << { text: "Employee Notes", url: employee_notes_url } if policy(EmployeeNote).index?
  nav_links << { text: "Groov Logs", url: groov_logs_url } if policy(Groov::Log).index?
  nav_links << { text: "IAO Bakesheets", url: "http://opto.varland.com/inert/bakesheets", target: "_blank", search: "grieve jpw" }
  nav_links << { text: "Online Bakesheet", url: "http://optoapi.varland.com/ovens", target: "_blank" }
  nav_links << { text: "Opto Logs (Old)", url: "http://vms.varland.com/opto/logs", target: "_blank" }
  nav_links << { text: "Records", url: records_url } if policy(:records).view?
  nav_links << { text: "Shift Notes", url: shift_notes_url } if policy(ShiftNote).index?
  nav_links << { text: "Thickness Data", url: "http://thickness.varland.com", target: "_blank" }
  nav_links << { text: "DMRs", url: "http://dmr.varland.com", target: "_blank" }
  nav_links << { text: "Reject Tag", url: "http://vms.varland.com/qc/rejected_parts/new", target: "_blank" }
  nav_links << { text: "Salt Spray", url: "http://saltspray.varland.com", target: "_blank" }
  nav_links << { text: "Final Inspection", url: vcms_quality_final_inspect_url, search: "green dot" } if policy(:home).view_final_inspection?
  nav_links << { text: "Hardness Tests", url: quality_hardness_tests_url } if policy(Quality::HardnessTest).index?
  nav_links << { text: "Reject Tags", url: quality_reject_tags_url } if policy(Quality::RejectTag).index? && !policy(Quality::RejectTag).index?
  nav_links << { text: "Jobs on Receipt", url: vcms_production_jobs_on_receipt_url }
  nav_links << { text: "Labeling Instructions", url: vcms_shipping_labeling_instructions_url }
  nav_links << { text: "Promise List", url: vcms_shipping_promise_list_url }
  nav_links << { text: "Part Search", url: vcms_production_part_search_url } if policy(:vcms).part_search?
  nav_links << { text: "Part History Search", url: vcms_production_part_history_search_url } if policy(:vcms).part_history_search?
  nav_links << { text: "Quote Search", url: vcms_sales_quote_search_url } if policy(:vcms).quote_search?
  nav_links << { text: "Recent Customers", url: vcms_sales_recent_customers_url, search: "query" } if policy(:vcms).recent_customers?
  nav_links << { text: "Receiving Priority Notes", url: shipping_receiving_priority_notes_url } if policy(Shipping::ReceivingPriorityNote).index?
  nav_links << { text: "SMALOG Labels", url: smalog_labels_url, search: "labels" } if policy(:shipping).smalog_labels?
  nav_links << { text: "TRIBRO Labels", url: trico_labels_url, search: "labels" } if policy(:shipping).trico_labels?

  nav_links.sort_by! { |nav| nav[:text] }

nav.navbar.fixed-top.navbar-expand-md.navbar-dark.bg-dark id="primary-nav"
  .container-fluid
    = link_to root_url do
      = image_tag "logo.svg", class: "navbar-logo"
    button.navbar-toggler type="button"  data-bs-toggle="collapse" data-bs-target="#primary-nav-content"
      span.navbar-toggler-icon
    .collapse.navbar-collapse id="primary-nav-content"
      .me-auto
        ul.navbar-nav
          == yield :nav
      .ms-auto
        ul.navbar-nav
          li.nav-item.me-3.d-flex.flex-row.align-items-center.justify-content-center.d-none id="auto_refresh"
            .navbar-text.px-md-2.shadow-sm.bg-black.rounded.font-monospace.fs-5 == "#{fa "sync-alt", spin: true, text_class: "text-white-important"} <span id=\"auto_refresh_remaining\">0:10</span>"
          li.nav-item.me-3 = primary_nav_link "sitemap", "Apps", "#", link_class: ["app-nav-toggler"]
          - if current_user
            - if current_user.notifications.length > 0
              li.nav-item.me-3.d-none = primary_nav_link "bell", "Notifications".html_safe, "#", badge: (current_user.notifications.unread.length > 0 ? current_user.notifications.unread.length : nil), link_class: ["notifications-toggler"]
            li.nav-item = primary_nav_link "id-badge", "Sign Out", destroy_user_session_path
          - else
            li.nav-item = primary_nav_link "user", "Sign In", user_google_oauth2_omniauth_authorize_path

.offcanvas.offcanvas-end.bg-dark.text-light id="notifications" tabindex="-1"
  .offcanvas-header
    .title Notifications
    button type="button" = fa "times-circle"
  .offcanvas-body.py-0
    ul.list-unstyled
      - if current_user
        - current_user.notifications.each do |notification|
          li.d-flex.flex-row.align-items-top.justify-content-start.mb-3
            - unless notification.is_read
              div.text-blue-500.me-1.lh-sm
                = fa 'circle'
            div.lh-sm
              == notification.text
              .small.text-muted.mt-1 = notification.created_at.strftime("%m/%d/%y %l:%M%P")

.offcanvas.offcanvas-start.bg-dark.text-light.w-100.border-0 id="app-navxxx" tabindex="-1"
  .offcanvas-header
    .title Applications
    button type="button" = fa "times-circle"
  .offcanvas-body.py-0
    .row
      .col-12.col-md
        = render "shared/navigation_menus/general"
      .col-12.col-md
        = render "shared/navigation_menus/production"
      .col-12.col-md
        = render "shared/navigation_menus/quality"
        = render "shared/navigation_menus/shipping"
      .col-12.col-md
        = render "shared/navigation_menus/maintenance"
        = render "shared/navigation_menus/lab"
      .col-12.col-md
        = render "shared/navigation_menus/queries"
      .col-12.col-md
        = render "shared/navigation_menus/external"
        = render "shared/navigation_menus/admin"

.offcanvas.offcanvas-start.bg-dark.text-light id="app-nav" tabindex="-1"
  .offcanvas-header
    input.form-control.me-3.form-control-sm#nav-link-filter type="text" placeholder="Type to filter..."
    button type="button" = fa "times-circle"
  .offcanvas-body.pt-0
    .row
      - nav_links.each do |nav|
        .col-12.nav-link-container *{data: {search: "#{nav[:text]} #{nav[:search]}".downcase}} = link_to "#{fa (nav[:external].present? && nav[:external] ? "external-link-alt" : "link")} #{nav[:text]}".html_safe, nav[:url], target: "#{nav[:target].present? ? nav[:target] : "_self"}", class: "#{nav[:external].present? && nav[:external] ? "text-yellow-400" : ""}"

javascript:
  $(function() {

    // Search navigation links upon text box entry.
    $("#nav-link-filter").on("keyup", function() {
      var $filter = $(this);
      var filterVal = $filter.val().toLowerCase();
      if (filterVal == "") {
        $(".nav-link-container").removeClass("d-none");
      } else {
        $(".nav-link-container").each(function() {
          var $container = $(this);
          var searchString = $container.data('search');
          if (searchString.includes(filterVal)) {
            $container.removeClass("d-none");
          } else {
            $container.addClass("d-none");
          }
        });
      }
    });

    // Hide offcanvas toggler if no visible links.
    var $offcanvas = $("#app-nav");
    if ($offcanvas.find(".offcanvas-body ul li a").length != 0) {
      $(".app-nav-toggler").parent().removeClass("d-none");
    }

    // Hide lists with no visible links.
    var $lists = $offcanvas.find(".offcanvas-body ul");
    $lists.each(function() {
      var $list = $(this);
      var countLinks = $list.find('a').length;
      if (countLinks == 0) {
        $list.remove();
      }
    });

    // Hide offcanvas menu on escape key.
    $(document).on("keydown", function(event) {
      if (event.key === "Escape") {
        var $offcanvas = $(".offcanvas");
        if ($offcanvas.hasClass("show")) {
          $offcanvas.removeClass("show").css("visibility", "hidden");
          $("#nav-link-filter").val("");
        }
      }
    });

    // Hide offcanvas menu on close button.
    $("#app-nav .offcanvas-header button").on("click", function(event) {
      event.preventDefault();
      var $offcanvas = $("#app-nav");
      if ($offcanvas.hasClass("show")) {
        $offcanvas.removeClass("show").css("visibility", "hidden");
        $("#nav-link-filter").val("");
      }
    });
    $("#notifications .offcanvas-header button").on("click", function(event) {
      event.preventDefault();
      var $offcanvas = $("#notifications");
      if ($offcanvas.hasClass("show")) {
        $offcanvas.removeClass("show").css("visibility", "hidden");
      }
    });

    // Toggle offcanvas menu on toggler click.
    $(".app-nav-toggler").on("click", function(event) {
      event.preventDefault();
      var $offcanvas = $("#app-nav");
      if ($offcanvas.hasClass("show")) {
        $offcanvas.removeClass("show").css("visibility", "hidden");
      } else {
        $offcanvas.addClass("show").css("visibility", "visible");
        $(".nav-link-container").removeClass("d-none");
        $("#nav-link-filter").focus();
      }
    });
    $(".notifications-toggler").on("click", function(event) {
      event.preventDefault();
      var $offcanvas = $("#notifications");
      if ($offcanvas.hasClass("show")) {
        $offcanvas.removeClass("show").css("visibility", "hidden");
      } else {
        alert("Need to mark all unread notifications read.");
        $offcanvas.addClass("show").css("visibility", "visible");
      }
    });

  });