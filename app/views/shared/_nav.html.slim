ruby:

  nav_headings = [
    "Quality",
    "Shipping",
    "Timeclock",
    "Administration",
    "General",
    "IT",
    "Maintenance",
    "Lab",
    "Production",
    "External Links",
    "H/R",
    "Opto",
    "Sales",
    "Training",
    "Materials",
    "Accounting"
  ].sort

  nav_links = []
  nav_links << {  text: "Financial Report Formatter",
                  url: format_report_url,
                  search: "general ledger",
                  headings: ["Accounting"],
                  external: false,
                  other_app: false }
  nav_links << {  text: "Weekly Schedule",
                  url: schedule_url(format: :pdf),
                  search: "payroll partners",
                  headings: ["Timeclock"],
                  external: false,
                  other_app: false }
  nav_links << {  text: "Clocked In Right Now",
                  url: clocked_in_now_url,
                  search: "payroll partners",
                  headings: ["Timeclock"],
                  external: false,
                  other_app: false }
  nav_links << {  text: "Training Videos",
                  url: training_videos_url,
                  search: "screen screencast",
                  headings: ["Training"],
                  external: false,
                  other_app: false }
  nav_links << {  text: "Quizzes",
                  url: "http://quiz.varland.com",
                  search: "quizzes quiz external",
                  headings: ["General", "Training"],
                  external: true,
                  other_app: true }
  nav_links << {  text: "Open Purchase Orders",
                  url: vcms_materials_open_po_report_url,
                  search: "po",
                  headings: ["Materials"],
                  external: false,
                  other_app: false }
  nav_links << {  text: "PO Search",
                  url: vcms_materials_po_search_url,
                  search: "purchase order",
                  headings: ["Materials"],
                  external: false,
                  other_app: false }
  nav_links << {  text: "Timeclock",
                  url: "http://timeclock.varland.com",
                  search: "break",
                  headings: ["Timeclock"],
                  other_app: true }
  nav_links << {  text: "Timeclock (iPad View)",
                  url: "http://timeclock.varland.com/ipad/",
                  search: "break",
                  headings: ["Timeclock"],
                  other_app: true }
  nav_links << {  text: "QMS",
                  url: "http://vmsqms.varland.com",
                  search: "VMSQMS",
                  headings: ["General"],
                  other_app: true }
  nav_links << {  text: "Permissions",
                  url: permissions_url,
                  headings: ["Administration"] } if policy(Permission).index?
  nav_links << {  text: "Network Hosts",
                  url: network_hosts_url,
                  search: "IPAM",
                  headings: ["IT"] }
  if policy(:home).sidekiq?
    nav_links << {  text: "Reset Sidekiq",
                    url: reset_sidekiq_url,
                    headings: ["Administration"] }
    nav_links << {  text: "Sidekiq",
                    url: sidekiq_web_url,
                    headings: ["Administration"] }
  end
  nav_links << {  text: "Varland Email",
                  url: "http://mail.varland.com",
                  search: "external webmail gmail",
                  external: true,
                  headings: ["External Links"] }
  nav_links << {  text: "Google Shared Drives",
                  url: "https://drive.google.com/drive/u/0/shared-drives",
                  search: "external departmental information employee information",
                  external: true,
                  headings: ["External Links"] }
  nav_links << {  text: "Vector Solutions Training",
                  url: "https://varland.convergencetraining.com",
                  search: "external quizzes",
                  external: true,
                  headings: ["External Links", "Training"] }
  nav_links << {  text: "Specifications",
                  url: "http://vms.varland.com/specifications",
                  headings: ["Quality", "Sales", "Production", "General"],
                  other_app: true }
  nav_links << {  text: "Vat History Notes",
                  url: "http://vms.varland.com/materials/vat_history_notes",
                  headings: ["Lab"],
                  other_app: true }
  nav_links << {  text: "Maintenance History Report",
                  url: "http://192.168.82.2/maintenance/history",
                  headings: ["Maintenance"],
                  other_app: true }
  nav_links << {  text: "PM Scheduled Tasks",
                  url: "http://vms.varland.com/maintenance/scheduled_task_status",
                  search: "maintenance",
                  headings: ["Maintenance"],
                  other_app: true }
  nav_links << {  text: "Maintenance Work Orders",
                  url: "http://maintenance.varland.com",
                  headings: ["Maintenance"] ,
                  other_app: true}
  nav_links << {  text: "Days Turn",
                  url: "http://daysturn.varland.com",
                  search: "turnaround",
                  headings: ["Production"],
                  other_app: true }
  nav_links << {  text: "Employee Notes",
                  url: employee_notes_url,
                  headings: ["General", "H/R"] } if policy(EmployeeNote).index?
  nav_links << {  text: "Groov Logs",
                  url: groov_logs_url,
                  search: "opto",
                  headings: ["Production", "Opto"] } if policy(Groov::Log).index?
  nav_links << {  text: "IAO Bakesheets",
                  url: "http://opto.varland.com/inert/bakesheets",
                  search: "grieve jpw",
                  headings: ["Production", "Opto"],
                  other_app: true }
  nav_links << {  text: "Online Bakesheet",
                  url: "http://optoapi.varland.com/ovens",
                  headings: ["Production", "Opto"],
                  other_app: true }
  nav_links << {  text: "Opto Logs (Old)",
                  url: "http://vms.varland.com/opto/logs",
                  headings: ["Production", "Opto"],
                  other_app: true }
  nav_links << {  text: "Records",
                  url: records_url,
                  headings: ["General"] } if policy(:records).view?
  nav_links << {  text: "Shift Notes",
                  url: shift_notes_url,
                  headings: ["Production", "General"] } if policy(ShiftNote).index?
  nav_links << {  text: "Thickness Data",
                  url: "http://thickness.varland.com",
                  headings: ["Production", "Quality"],
                  other_app: true }
  nav_links << {  text: "DMRs",
                  url: "http://dmr.varland.com",
                  headings: ["Quality"],
                  other_app: true }
  #nav_links << {  text: "Reject Tag",
  #                url: "http://vms.varland.com/qc/rejected_parts/new",
  #                headings: ["Quality"],
  #                other_app: true }
  nav_links << {  text: "Salt Spray",
                  url: "http://saltspray.varland.com",
                  headings: ["Quality"],
                  other_app: true }
  nav_links << {  text: "Final Inspection",
                  url: vcms_quality_final_inspect_url,
                  search: "green dot",
                  headings: ["Quality"] } if policy(:home).view_final_inspection?
  nav_links << {  text: "Completed Final Inspection",
                  url: vcms_quality_final_inspect_completed_url,
                  search: "green dot",
                  headings: ["Quality"] } if policy(:home).view_final_inspection?
  nav_links << {  text: "Hardness Tests",
                  url: quality_hardness_tests_url,
                  headings: ["Quality"] } if policy(Quality::HardnessTest).index?
  nav_links << {  text: "Reject Tags",
                  url: quality_reject_tags_url,
                  headings: ["Quality"] } if policy(Quality::RejectTag).index?
  nav_links << {  text: "Jobs on Receipt",
                  url: vcms_production_jobs_on_receipt_url,
                  headings: ["Production", "Sales", "Shipping"] }
  nav_links << {  text: "Labeling Instructions",
                  url: vcms_shipping_labeling_instructions_url,
                  headings: ["Shipping"] }
  nav_links << {  text: "Promise List",
                  url: vcms_shipping_promise_list_url,
                  headings: ["Production", "Quality", "Shipping"] }
  nav_links << {  text: "Part Search",
                  url: vcms_production_part_search_url,
                  headings: ["Production", "Sales"] } if policy(:vcms).part_search?
  nav_links << {  text: "Part History Search",
                  url: vcms_production_part_history_search_url,
                  headings: ["Production", "Sales"] } if policy(:vcms).part_history_search?
  nav_links << {  text: "Quote Search",
                  url: vcms_sales_quote_search_url,
                  headings: ["Sales"] } if policy(:vcms).quote_search?
  nav_links << {  text: "Recent Customers",
                  url: vcms_sales_recent_customers_url,
                  search: "query",
                  headings: ["Sales"] } if policy(:vcms).recent_customers?
  nav_links << {  text: "Receiving Priority Notes",
                  url: shipping_receiving_priority_notes_url,
                  headings: ["Shipping", "General"] } if policy(Shipping::ReceivingPriorityNote).index?
  nav_links << {  text: "SMALOG Labels",
                  url: smalog_labels_url,
                  headings: ["Shipping", "Quality"] } if policy(:shipping).smalog_labels?
  nav_links << {  text: "TRIBRO Labels",
                  url: trico_labels_url,
                  headings: ["Shipping", "Quality"] } if policy(:shipping).trico_labels?
  nav_links << {  text: "Vacation Calendars",
                  url: vacation_calendars_url,
                  headings: ["General"] }
  nav_links << {  text: "Home",
                  url: root_url,
                  search: "dashboard",
                  headings: ["General"] }
  nav_links << {  text: "Historian",
                  url: "http://historian.varland.com",
                  search: "external historian groov",
                  external: true,
                  headings: ["External Links"] }
  nav_links.each do |nav|
    nav[:target] = "_self"
    nav[:target] = "_blank" if nav[:external].present? || nav[:other_app].present?
    nav[:link_class] = ""
    nav[:link_class] = "text-yellow-400" if nav[:external].present?
    nav[:icon] = "link"
    nav[:icon] = "external-link-alt" if nav[:external].present?
  end
  nav_links.sort_by! { |nav| nav[:text] }
  used_headings = []
  nav_links.each do |nav|
    nav[:headings].each do |heading|
      used_headings << heading
      unless nav_headings.include?(heading)
        raise "Fucked up a heading definiting in nav_links (#{heading})."
      end
    end
  end
  used_headings.uniq!
  nav_headings.reject! {|heading| !used_headings.include?(heading) }

nav.navbar.fixed-top.navbar-expand-md.navbar-dark.bg-dark id="primary-nav"
  .container-fluid
    = link_to root_url do
      = image_tag "logo.svg", class: "navbar-logo"
    button.navbar-toggler type="button"  data-bs-toggle="collapse" data-bs-target="#primary-nav-content"
      span.navbar-toggler-icon
    .collapse.navbar-collapse id="primary-nav-content"
      .me-auto
        ul.navbar-nav
          == yield :nav
      .ms-auto
        ul.navbar-nav
          li.nav-item.me-3.d-flex.flex-row.align-items-center.justify-content-center.d-none id="auto_refresh"
            .navbar-text.px-md-2.shadow-sm.bg-black.rounded.font-monospace.fs-5 == "#{fa "sync-alt", spin: true, text_class: "text-white-important"} <span id=\"auto_refresh_remaining\">0:10</span>"
          li.nav-item.me-3 = primary_nav_link "sitemap", "Apps Menu", "#", link_class: ["app-nav-toggler"]
          - if current_user
            - if current_user.notifications.length > 0
              li.nav-item.me-3.d-none = primary_nav_link "bell", "Notifications".html_safe, "#", badge: (current_user.notifications.unread.length > 0 ? current_user.notifications.unread.length : nil), link_class: ["notifications-toggler"]
            li.nav-item = primary_nav_link "id-badge", "Sign Out", destroy_user_session_path
          - else
            li.nav-item = primary_nav_link "user", "Sign In", user_google_oauth2_omniauth_authorize_path

.offcanvas.offcanvas-end.bg-dark.text-light id="notifications" tabindex="-1"
  .offcanvas-header
    .title Notifications
    button type="button" = fa "times-circle"
  .offcanvas-body.py-0
    ul.list-unstyled
      - if current_user
        - current_user.notifications.each do |notification|
          li.d-flex.flex-row.align-items-top.justify-content-start.mb-3
            - unless notification.is_read
              div.text-blue-500.me-1.lh-sm
                = fa 'circle'
            div.lh-sm
              == notification.text
              .small.text-muted.mt-1 = notification.created_at.strftime("%m/%d/%y %l:%M%P")

.offcanvas.offcanvas-start.bg-dark.text-light id="app-nav" tabindex="-1"
  .offcanvas-header
    input.form-control.me-3.form-control-sm#nav-link-filter type="text" placeholder="Type to filter..."
    button type="button" = fa "times-circle"
  .offcanvas-body.pt-0
    .row
      - nav_links.each do |nav|
        - if nav[:headings].length == 0
          .col-12.nav-link-container *{data: {search: "#{nav[:text]} #{nav[:search]}".downcase}} = link_to "#{fa nav[:icon]} #{nav[:text]}".html_safe, nav[:url], target: nav[:target], class: nav[:link_class]
        - else
          .col-12.nav-link-container.hidden-unless-search *{data: {search: "#{nav[:text]} #{nav[:search]}".downcase}} = link_to "#{fa nav[:icon]} #{nav[:text]}".html_safe, nav[:url], target: nav[:target], class: nav[:link_class]
      - nav_headings.each_with_index do |heading, index|
        .col-12.nav-link-header
          .row
            .col-12.header = link_to heading, "#nav-links-#{index}", data: { 'bs-toggle': "collapse" }
            .row.mb-2.collapse *{id: "nav-links-#{index}"}
              - nav_links.each do |nav|
                - if nav[:headings].include?(heading)
                  .col-12.nav-link-container *{data: {search: "#{nav[:text]} #{nav[:search]}".downcase}} = link_to "#{fa nav[:icon]} #{nav[:text]}".html_safe, nav[:url], target: nav[:target], class: nav[:link_class]

javascript:
  $(function() {

    // Search navigation links upon text box entry.
    $("#nav-link-filter").on("keyup", function() {
      var $filter = $(this);
      var filterVal = $filter.val().toLowerCase();
      if (filterVal == "") {
        $(".nav-link-header").removeClass("d-none");
        $(".nav-link-container").removeClass("d-none");
        $(".hidden-unless-search").addClass("d-none");
      } else {
        $(".nav-link-header").addClass("d-none");
        $(".nav-link-container").each(function() {
          var $container = $(this);
          var searchString = $container.data('search');
          if (searchString.includes(filterVal)) {
            $container.removeClass("d-none");
          } else {
            $container.addClass("d-none");
          }
        });
      }
    });

    // Hide offcanvas toggler if no visible links.
    var $offcanvas = $("#app-nav");
    if ($offcanvas.find(".offcanvas-body ul li a").length != 0) {
      $(".app-nav-toggler").parent().removeClass("d-none");
    }

    // Hide offcanvas menu on escape key.
    $(document).on("keydown", function(event) {
      if (event.key === "Escape") {
        var $offcanvas = $(".offcanvas");
        if ($offcanvas.hasClass("show")) {
          $offcanvas.removeClass("show").css("visibility", "hidden");
          $("#nav-link-filter").val("");
        }
      }
    });

    // Hide offcanvas menu on close button.
    $("#app-nav .offcanvas-header button").on("click", function(event) {
      event.preventDefault();
      var $offcanvas = $("#app-nav");
      if ($offcanvas.hasClass("show")) {
        $offcanvas.removeClass("show").css("visibility", "hidden");
        $("#nav-link-filter").val("");
      }
    });
    $("#notifications .offcanvas-header button").on("click", function(event) {
      event.preventDefault();
      var $offcanvas = $("#notifications");
      if ($offcanvas.hasClass("show")) {
        $offcanvas.removeClass("show").css("visibility", "hidden");
      }
    });

    // Toggle offcanvas menu on toggler click.
    $(".app-nav-toggler").on("click", function(event) {
      event.preventDefault();
      var $offcanvas = $("#app-nav");
      if ($offcanvas.hasClass("show")) {
        $offcanvas.removeClass("show").css("visibility", "hidden");
      } else {
        $offcanvas.addClass("show").css("visibility", "visible");
        $(".nav-link-header").removeClass("d-none");
        $(".nav-link-container").removeClass("d-none");
        $(".hidden-unless-search").addClass("d-none");
        $("#nav-link-filter").focus();
        $(".nav-link-header .collapse").removeClass("show");
      }
    });
    $(".notifications-toggler").on("click", function(event) {
      event.preventDefault();
      var $offcanvas = $("#notifications");
      if ($offcanvas.hasClass("show")) {
        $offcanvas.removeClass("show").css("visibility", "hidden");
      } else {
        $offcanvas.addClass("show").css("visibility", "visible");
      }
    });

  });